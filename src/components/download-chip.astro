---
import { Octokit } from "@octokit/core";
import { Icon } from "astro-iconify";

interface Props {
  releaseType?: "canary" | "release";
  release?: number;
}

const { releaseType = "release", release = 0 } = Astro.props;

interface Release {
  publishedAt: string;
  name: string;
  url: string;
}

interface graphqlResponse {
  repository: {
    releases: {
      edges: {
        node: Release;
      }[];
    };
  };
}

async function getDownload(): Promise<[string, string, string] | undefined> {
  if (!import.meta.env.IS_PROD) {
    console.log("Development mode, returning mocked array");
    return ["https://github.com/VueTubeApp", "2023-01-01T00:00:00Z", "v1.1.1"];
  }
  const octokit = new Octokit({ auth: import.meta.env.GITHUB_TOKEN });
  if (releaseType === "canary") {
    const { data } = await octokit.request(
      "GET /repos/{owner}/{repo}/actions/artifacts",
      {
        owner: "VueTubeApp",
        repo: "VueTube",
      }
    );
    let iter = 0;
    let latestArtifact;
    for (const artifact of data.artifacts) {
      if (artifact.name.includes("android")) {
        latestArtifact = artifact;
        if (iter === release) {
          return latestArtifact;
        }
      }
      iter++;
    }
    if (!latestArtifact) {
      return;
    }
    return [
      latestArtifact.archive_download_url,
      latestArtifact.created_at,
      latestArtifact.workflow_run?.head_sha || "",
    ];
  } else {
    // we can actually use the new GraphQL API for this
    const response = await octokit.graphql(
      `
        query GetReleases($name: String!, $owner: String!, $first: Int!) {
            repository(name: $name, owner: $owner) {
                releases(first: $first) {
                    edges {
                        node {
                        publishedAt
                        name
                        url
                        }
                    }
                }
            }
        }
        `,
      {
        name: "VueTube",
        owner: "VueTubeApp",
        first: release + 1,
      }
    );
    // check if the response is valid and is a type of graphqlResponse
    if (response && response.hasOwnProperty("repository")) {
      const { repository } = response as graphqlResponse;
      const { releases } = repository;
      const { edges } = releases;
      const { node } = edges[release];
      return [node.url, node.publishedAt, node.name];
    } else {
      return;
    }
  }
}

const response = await getDownload();
if (!response) {
  return;
}
let [downloadUrl, publishedAt, name] = response;
publishedAt = new Date(publishedAt).toLocaleDateString("en-US", {
  year: "numeric",
  month: "long",
  day: "numeric",
});
---

<a
  class="w-full rounded-2xl bg-neutral-800 p-8 duration-300 hover:scale-105 focus:scale-105 active:scale-90"
  href={downloadUrl}
>
  <div class="flex flex-col items-center">
    <Icon name="mdi:android" class="h-24 w-24" />
    <h3 class="mt-4 text-2xl font-bold">Download</h3>
    <p class="mt-2 text-center text-neutral-400">
      Download the latest {releaseType} build of VueTube for Android
    </p>
  </div>
  <div class="mt-4 flex flex-col items-center">
    <p class="mt-2 text-neutral-400">
      {name} ({publishedAt})
    </p>
  </div>
</a>
